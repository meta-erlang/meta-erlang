# Based on c_src.mk from erlang.mk by Loic Hoguin <essen@ninenines.eu>

CURDIR := $(shell pwd)
BASEDIR := $(abspath $(CURDIR)/..)

PROJECT ?= $(notdir $(BASEDIR))
PROJECT := $(strip $(PROJECT))

ERLANG_VERSION_GT_22 := $(shell erl -noshell -s init stop -eval "erlang:display(erlang:system_info(otp_release) > "22").")
ERTS_INCLUDE_DIR ?= $(REBAR3_TARGET_SYSTEM_LIBS)/usr/include
ERL_INTERFACE_INCLUDE_DIR ?= $(REBAR3_TARGET_SYSTEM_LIBS)/usr/lib
ERL_INTERFACE_LIB_DIR ?= $(REBAR3_TARGET_SYSTEM_LIBS)/usr/lib

C_SRC_DIR = $(CURDIR)
C_SRC_OUTPUT ?= $(CURDIR)/../priv/$(PROJECT).so

# System type and C compiler/flags.

UNAME_SYS := $(shell uname -s)
SNAPPY_STATIC_OR_DYN_LIB := system/lib/libsnappy.a

ifeq ($(UNAME_SYS), Darwin)
    CC ?= cc
    CFLAGS ?= -O3 -std=c99 -arch x86_64 -finline-functions -Wall -Wmissing-prototypes
    CXXFLAGS ?= -O3 -arch x86_64 -finline-functions -Wall -stdlib=libstdc++
    LDFLAGS ?= -arch x86_64 -flat_namespace -undefined suppress  -stdlib=libstdc++
else ifeq ($(UNAME_SYS), FreeBSD)
    CC ?= cc
    CFLAGS ?= -O3 -std=c99 -finline-functions -Wall -Wmissing-prototypes
    CXXFLAGS ?= -O3 -finline-functions -Wall
    FREEBSD_MAJOR_VERSION := $(shell uname -U | cut -c1-2)

    ifeq ($(FREEBSD_MAJOR_VERSION), 12)
        SNAPPY_STATIC_OR_DYN_LIB = /usr/local/lib/libsnappy.so
    endif

else ifeq ($(UNAME_SYS), Linux)
    CC ?= gcc
    CFLAGS ?= -O3 -std=c99 -finline-functions -Wall -Wmissing-prototypes
    CXXFLAGS ?= -O3 -finline-functions -Wall
endif

CFLAGS += -fPIC -I $(ERTS_INCLUDE_DIR) -I $(ERL_INTERFACE_INCLUDE_DIR) -I leveldb/include -I leveldb
CXXFLAGS += -fPIC -I $(ERTS_INCLUDE_DIR) -I $(ERL_INTERFACE_INCLUDE_DIR) -I leveldb/include -I leveldb

ifeq ($(ERLANG_VERSION_GT_22), true)
    LDLIBS += -L$(ERL_INTERFACE_LIB_DIR) -lei
else
    LDLIBS += -L$(ERL_INTERFACE_LIB_DIR) -lerl_interface -lei
endif

LDFLAGS += -shared leveldb/libleveldb.a -lsnappy -lstdc++

# Verbosity.

c_verbose_0 = @echo " C     " $(?F);
c_verbose = $(c_verbose_$(V))

cpp_verbose_0 = @echo " CPP   " $(?F);
cpp_verbose = $(cpp_verbose_$(V))

link_verbose_0 = @echo " LD    " $(@F);
link_verbose = $(link_verbose_$(V))

SOURCES := $(shell find $(C_SRC_DIR) -maxdepth 1 -type f \( -name "*.c" -o -name "*.C" -o -name "*.cc" -o -name "*.cpp" \))
OBJECTS = $(addsuffix .o, $(basename $(SOURCES)))

COMPILE_C = $(c_verbose) $(CC) $(CFLAGS) $(CPPFLAGS) -c
COMPILE_CPP = $(cpp_verbose) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c

$(C_SRC_OUTPUT): $(OBJECTS)
	@mkdir -p $(BASEDIR)/priv/
	$(link_verbose) $(CC) $(OBJECTS) $(LDFLAGS) $(LDLIBS) -o $(C_SRC_OUTPUT)

%.o: %.c
	$(COMPILE_C) $(OUTPUT_OPTION) $<

%.o: %.cc
	$(COMPILE_CPP) $(OUTPUT_OPTION) $<

%.o: %.C
	$(COMPILE_CPP) $(OUTPUT_OPTION) $<

%.o: %.cpp
	$(COMPILE_CPP) $(OUTPUT_OPTION) $<

clean:
	@rm $(C_SRC_OUTPUT) $(OBJECTS)
