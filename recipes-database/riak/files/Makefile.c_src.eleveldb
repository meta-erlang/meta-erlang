# Based on c_src.mk from erlang.mk by Loic Hoguin <essen@ninenines.eu>

LEVELDB_VSN ?= "2.0.38"

CURDIR := $(shell pwd)
BASEDIR := $(abspath $(CURDIR)/..)

C_SRC_DIR = $(CURDIR)
C_SRC_OUTPUT ?= $(CURDIR)/../priv/eleveldb.so

PKG_CONFIG_ERL_EI = $(shell pkg-config --exists erl_ei; echo $$?)
PKG_CONFIG_ERL_ERTS = $(shell pkg-config --exists erl_erts; echo $$?)

ifeq ($(PKG_CONFIG_ERL_EI), 0)
ERL_INTERFACE_INCLUDE_DIR = $(shell pkg-config --cflags erl_ei)
ERL_INTERFACE_LIB_DIR = $(shell pkg-config --libs erl_ei)

CFLAGS += $(ERL_INTERFACE_INCLUDE_DIR)
CXXFLAGS += $(ERL_INTERFACE_INCLUDE_DIR)
LDLIBS += $(ERL_INTERFACE_LIB_DIR)
else
ERL_INTERFACE_INCLUDE_DIR = $(shell erl -noshell -s init stop -eval "io:format(\"~ts\", [code:lib_dir(erl_interface, include)]).")
ERL_INTERFACE_LIB_DIR = $(shell erl -noshell -s init stop -eval "io:format(\"~ts\", [code:lib_dir(erl_interface, lib)]).")

CFLAGS += -I $(ERL_INTERFACE_INCLUDE_DIR)
CXXFLAGS += -I $(ERL_INTERFACE_INCLUDE_DIR)
LDLIBS += -L $(ERL_INTERFACE_LIB_DIR) -lei
endif

ifeq ($(PKG_CONFIG_ERL_ERTS), 0)
ERTS_INCLUDE_DIR = $(shell pkg-config --cflags erl_erts)

CFLAGS += $(ERTS_INCLUDE_DIR)
CXXFLAGS += $(ERTS_INCLUDE_DIR)
else
ERTS_INCLUDE_DIR = $(shell erl -noshell -s init stop -eval "io:format(\"~ts/erts-~ts/include/\", [code:root_dir(), erlang:system_info(version)]).")

CFLAGS += -I $(ERTS_INCLUDE_DIR)
CXXFLAGS += -I $(ERTS_INCLUDE_DIR)
endif

# System type and C compiler/flags.

CFLAGS += -fPIC -shared -I leveldb/include -I leveldb
CXXFLAGS += -fPIC -I leveldb/include -I leveldb

LDLIBS +=  -lpthread leveldb/libleveldb.a -lstdc++ -lsnappy
LDFLAGS += -shared

# Verbosity.

c_verbose_0 = @echo " C     " $(?F);
c_verbose = $(c_verbose_$(V))

cpp_verbose_0 = @echo " CPP   " $(?F);
cpp_verbose = $(cpp_verbose_$(V))

link_verbose_0 = @echo " LD    " $(@F);
link_verbose = $(link_verbose_$(V))

SOURCES := $(shell find $(C_SRC_DIR) -type f \( -name "*.c" -o -name "*.C" -o -name "*.cc" -o -name "*.cpp" \) -print -o -type d -name "leveldb" -prune)
OBJECTS = $(addsuffix .o, $(basename $(SOURCES)))

COMPILE_C = $(c_verbose) $(CC) $(CFLAGS) $(CPPFLAGS) -c
COMPILE_CPP = $(cpp_verbose) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c

compile: get-deps ldb $(C_SRC_OUTPUT)
	cp leveldb/perf_dump leveldb/sst_rewrite leveldb/sst_scan leveldb/leveldb_repair ../priv

get-deps:
	git config --global --add safe.directory /__w/eleveldb/eleveldb
	if [ ! -d leveldb ]; then \
		git clone https://github.com/basho/leveldb && \
		(cd leveldb && git apply ../0001-Switch-to-shared-snappy-library-link.patch) && \
		(cd leveldb && git checkout $(LEVELDB_VSN)) && \
		(cd leveldb && git submodule update --init); \
	fi

ldb:
	$(MAKE) LDFLAGS="$(LDFLAGS) -lsnappy -lpthread" LD_LIBRARY_PATH="$(LD_LIBRARY_PATH)" -C leveldb all
	$(MAKE) LDFLAGS="$(LDFLAGS) -lsnappy -lpthread" LD_LIBRARY_PATH="$(LD_LIBRARY_PATH)" -C leveldb tools

$(C_SRC_OUTPUT): $(OBJECTS)
	@mkdir -p $(BASEDIR)/priv/
	$(link_verbose) $(CC) $(OBJECTS) $(LDFLAGS) $(LDLIBS) -o $(C_SRC_OUTPUT)

%.o: %.c
	$(COMPILE_C) $(OUTPUT_OPTION) $<

%.o: %.cc
	$(COMPILE_CPP) $(OUTPUT_OPTION) $<

%.o: %.C
	$(COMPILE_CPP) $(OUTPUT_OPTION) $<

%.o: %.cpp
	$(COMPILE_CPP) $(OUTPUT_OPTION) $<

clean:
	@rm -f $(C_SRC_OUTPUT) $(OBJECTS)
