#!/usr/bin/env python3

# generate Erlang Manifest for the OpenEmbedded build system
# (C) 2016 Maciej Borzecki <maciej.borzecki@open-rnd.pl>
# (C) 2002-2010 Michael 'Mickey' Lauer <mlauer@vanille-media.de>
# (C) 2007 Jeremy Laine
# licensed under MIT, see COPYING.MIT
#
# June 22, 2011 -- Mark Hatle <mark.hatle@windriver.com>
#  * Updated to no longer generate special -dbg package, instead use the
#    single system -dbg
#  * Update version with ".1" to indicate this change
#
# Feb 25, 2016 -- Maciej Borzecki <maciej.borzecki@open-rnd.pl>
#  * Updated to support generation for different Erlang version
#  * Major cleanup of module handling
#  * Version reset to 20160225
#
# Aug 09, 2018 -- Niklas Johansson <raphexion@gmail.com>
#  * Minor bugfix (isinstance)
#  * Improve readability and pep8

import os
import sys
import argparse
from collections import OrderedDict

__author__ = "Michael 'Mickey' Lauer <mlauer@vanille-media.de>"
__version__ = "20180809"


class Module(object):
    PN = '${PN}-%(name)s'
    BASE_PATHS = ["/%(name)s-*"]
    DOC_PATHS = ["/%(name)s-*/doc",
                 "/%(name)s-*/man"]
    DEBUG_PATHS = ["/%(name)s-*/bin/.debug",
                   "/%(name)s-*/lib/.debug",
                   "/%(name)s-*/priv/.debug",
                   "/%(name)s-*/priv/lib/.debug",
                   "/%(name)s-*/priv/obj/.debug",
                   "/%(name)s-*/priv/bin/.debug"]
    DEV_PATHS = ["/%(name)s-*/*src",
                 "/%(name)s-*/include",
                 "/%(name)s-*/priv/obj"]
    STATICDEV_PATHS = ["/%(name)s-*/lib/*.a",
                       "/%(name)s-*/priv/lib/*.a"]
    EXAMPLES_PATH = ["/%(name)s-*/examples"]

    def __init__(self, name, description="", dependencies="", base=[], doc=[],
                 debug=[], debug_append=[], dev=[], dev_append=[], staticdev=[], examples=True, packageconfig=""):
        self.packageconfig_enable = False
        self.packages_enable = ['doc', 'dbg', 'dev', 'staticdev', 'examples']
        self.name = name
        base_formatter = {'name': name}
        sanitized_name = name.replace("-", "_")
        sanitized_formatter = {'name': sanitized_name}

        pn = self.PN % base_formatter

        if packageconfig == False:
            self.packageconfig = False
        elif len(packageconfig) > 0:
            self.packageconfig_enable = name
            self.packageconfig = packageconfig
        else:
            self.packageconfig_enable = name
            self.packageconfig = f"--with-{name},--without-{name},,"

        if examples == False:
          self.packages_enable.remove('examples')
          examples = []
        elif examples == True:
          examples = self.EXAMPLES_PATH
        elif len(examples) > 0:
            pass
        else:
          examples = self.EXAMPLES_PATH

        if doc == False:
          self.packages_enable.remove('doc')
          doc = []
        elif len(doc) > 0:
          pass
        else:
          doc = self.DOC_PATHS

        if debug == False:
          self.packages_enable.remove('dbg')
          debug = []
        elif len(debug) > 0:
          debug.extend(debug_append)
          pass
        else:
          debug = self.DEBUG_PATHS
          debug.extend(debug_append)

        if dev == False:
          self.packages_enable.remove('dev')
          dev = []
        elif len(dev) > 0:
          dev.extend(dev_append)
          pass
        else:
          dev = self.DEV_PATHS
          dev.extend(dev_append)

        if staticdev == False:
          self.packages_enable.remove('staticdev')
          staticdev = []
        elif len(staticdev) > 0:
          pass
        else:
          staticdev = self.STATICDEV_PATHS

        base_paths = ' '.join(base if base else self.BASE_PATHS)
        doc_paths = ' '.join(doc)
        debug_paths = ' '.join(debug)
        dev_paths = ' '.join(dev)
        staticdev_paths = ' '.join(staticdev)
        examples_paths = ' '.join(examples)
        self.packages = []
        # doc files are not Erlang modules,
        # hence a base formatter can be used
        if 'examples' in self.packages_enable:
            self.packages.append([pn + "-examples", "", "", examples_paths % sanitized_formatter, self.packageconfig_enable])
        if 'doc' in self.packages_enable:
            self.packages.append([pn + "-doc", "", "", doc_paths % base_formatter, self.packageconfig_enable])
        if 'dbg' in self.packages_enable:
            self.packages.append([pn + "-dbg", "", "", debug_paths % sanitized_formatter, self.packageconfig_enable])
        if 'dev' in self.packages_enable:
            self.packages.append([pn + "-dev", "", "", dev_paths % sanitized_formatter, self.packageconfig_enable])
        if 'staticdev' in self.packages_enable:
            self.packages.append([pn + "-staticdev", "", "", staticdev_paths % sanitized_formatter, self.packageconfig_enable])

        self.packages.append([pn, description, dependencies, base_paths % sanitized_formatter, self.packageconfig_enable])


COMMON_MODULES = [
    Module("sasl", packageconfig=False),
    Module("stdlib", packageconfig=False),
    Module("kernel", packageconfig=False),
    Module("asn1"),
    Module("common-test",
           base=["${bindir}/ct_run ${libdir}/erlang/bin/ct_run",
                 "/common_test-*",
                 "${libdir}/erlang/erts-*/bin/ct_run"]),
    Module("compiler",
           base=["${bindir}/erlc",
                 "${libdir}/erlang/bin/erlc",
                 "/compiler-*",
                 "${libdir}/erlang/erts-*/bin/erlc"]),
    Module("crypto",
           packageconfig="--with-crypto,--without-crypto,openssl"),
    Module("debugger",
           "--with-debugger,--without-debugger,,"),
    Module("dialyzer",
           base=["${bindir}/%(name)s",
                 "${libdir}/erlang/bin/%(name)s",
                 "/%(name)s-*",
                 "${libdir}/erlang/erts-*/bin/%(name)s"]),
    Module("diameter"),
    Module("edoc"),
    Module("eldap"),
    # emacs files belongs to tools, but meta-erlang separates it
    Module("emacs",
           base=["${libdir}/erlang/lib/tools-*/emacs"],
           debug=False,
           doc=False,
           dev=False,
           staticdev=False),
    Module("erl-docgen"),
    Module("erl-interface",
           dev_append=[
                "${libdir}/erlang/usr/include/eicode.h",
                "${libdir}/erlang/usr/include/erl_drv_nif.h",
                "${libdir}/erlang/usr/include/ei_connect.h",
                "${libdir}/erlang/usr/include/ei.h"]),
    Module("et"),
    Module("eunit"),
    Module("ftp"),
    Module("inets"),
    Module("jinterface"),
    Module("megaco"),
    Module("mnesia"),
    Module("observer",
           "--with-observer,--without-observer,wxwidgets,"),
    Module("wx",
           packageconfig="--with-wx,--without-wx,wxwidgets"),
    Module("os-mon"),
    Module("parsetools"),
    Module("public-key"),
    Module("reltool"),
    Module("runtime-tools"),
    Module("snmp"),
    Module("ssh"),
    Module("ssl",
           packageconfig=",--without-ssl,,"),
    Module("syntax-tools"),
    Module("tftp"),
    Module("tools"),
    Module("typer",
           base=["${bindir}/%(name)s",
                 "${libdir}/erlang/bin/%(name)s",
                 "/%(name)s-*",
                 "${libdir}/erlang/erts-*/bin/%(name)s"],
           packageconfig=False),
    Module("xmerl"),
    Module("odbc",
           packageconfig="--with-odbc,--without-odbc,libodbc"),
    Module("epmd",
           base=["${libdir}/erlang/erts-*/bin/epmd",
                 "${libdir}/erlang/bin/epmd",
                 "${bindir}/epmd",
                 "${systemd_system_unitdir}/epmd.service",
                 "${systemd_system_unitdir}/epmd.socket",
                 "${sysconfdir}/init.d"],
           debug=False,
           doc=False,
           dev=False,
           staticdev=False,
           packageconfig=False),
    Module("erts",
           base=["${bindir}",
                 "${libdir}/erlang/releases",
                 "${libdir}/erlang/bin",
                 "${libdir}/erlang/erts-*/bin",
                 # only valid for nativesdk-erlang
                 "${libdir}/erlang/lib/erts-*/ebin"],
           dev=["${libdir}/erlang/lib/erts-*/src",
                "${libdir}/erlang/erts-*/*src",
                "${libdir}/erlang/erts-*/include",
                "${libdir}/erlang/erts-*/priv/obj",
                "${libdir}/erlang/erts-*/bin/yielding_c_fun",
                "${libdir}/erlang/usr/include/erl_driver.h",
                "${libdir}/erlang/usr/include/erl_nif_api_funcs.h",
                "${libdir}/erlang/usr/include/erl_int_sizes_config.h",
                "${libdir}/erlang/usr/include/driver_int.h",
                "${libdir}/erlang/usr/include/erl_fixed_size_int_types.h",
                "${libdir}/erlang/usr/include/erl_nif.h"],
           debug_append=["${libdir}/erlang/erts-*/bin/.debug",
                         "${libdir}/erlang/bin/.debug"],
           packageconfig=False),
]


SPEC = {
    '25.3.2.21': {
        'ERTS_VERSION': '13.2.2.16',
        'ERL_INTERFACE_VERSION': '5.3.2.1',
        'modules': COMMON_MODULES,
    },
    '26.2.5.15': {
        'ERTS_VERSION': '14.2.5.11',
        'ERL_INTERFACE_VERSION': '5.5.1',
        'modules': COMMON_MODULES,
    },
    '27.3.4.3': {
        'ERTS_VERSION': '15.2.7.2',
        'ERL_INTERFACE_VERSION': '5.5.2',
        'modules': COMMON_MODULES,
    },
    '28.0.4': {
        'ERTS_VERSION': '16.0.3',
        'ERL_INTERFACE_VERSION': '5.6',
        'modules': COMMON_MODULES,
    },
    '29.0-rc0': {
        'ERTS_VERSION': '16.0.1',
        'ERL_INTERFACE_VERSION': '5.6',
        'modules': COMMON_MODULES,
    }

}


class MakefileMaker:
    WARNING = '\n# '.join([
        '# WARNING: This file is AUTO GENERATED.',
        'Manual edits will be lost next time we regenerate this file.',
        'Generated by script in scripts/contrib/erlang',
        'Was runned for erlang version: %s'])

    def __init__(self, outfile, version, erts_version, erl_interface_version):
        """initialize"""
        self.version = version
        self.erts_version = erts_version
        self.erl_interface_version = erl_interface_version
        self.packages = OrderedDict()
        self.packageconfigs = OrderedDict()
        self.targetPrefix = "${libdir}/erlang/lib"
        self.output = outfile
        self.out(self.WARNING % version)
    #
    # helper functions
    #

    def out(self, data):
        """print a line to the output file"""
        self.output.write("%s\n" % data)

    def setPrefix(self, targetPrefix):
        """set a file prefix for addPackage files"""
        self.targetPrefix = targetPrefix

    def doProlog(self):
        self.out(""" """)
        self.out('NOAUTOPACKAGEDEBUG = "1"')
        self.out('ERLANG_APPLICATIONS = "\\')
        for name, _ in sorted(self.packageconfigs.items()):            
            if name == "wx":
                self.out('    ${@bb.utils.contains("BBFILE_COLLECTIONS", "openembedded-layer", "wx", "", d)} \\')
            else:
                self.out(f'    {name} \\')
        self.out('"')
        for name, packageconfig in sorted(self.packageconfigs.items()):
            self.out(f'PACKAGECONFIG[{name}] = "{packageconfig}"')
        self.out("")

    def addModule(self, module):
        self.addPackageconfig(module)
        for pkg in module.packages:
            self.addPackage(*pkg)

    def addPackageconfig(self, module):
        if module.packageconfig:
            self.packageconfigs[module.name] = module.packageconfig

    def addPackage(self, name, description, dependencies, filenames, packageconfig_enable, keepfiles=False):
        """add a package to the Makefile"""
        if isinstance(filenames, str):
            filenames = filenames.split()
        fullFilenames = []
        for filename in filenames:
            if filename[0] != "$":
                fullFilenames.append("%s%s" % (self.targetPrefix, filename))
            else:
                fullFilenames.append(filename)
        #print(f"kkkk {packageconfig_enable} keepfiles {keepfiles}")
        self.packages[name] = description, dependencies, fullFilenames, packageconfig_enable, keepfiles

    def doBody(self):
        """generate body of Makefile"""

        #
        # generate provides line
        #

        provideLine = 'PROVIDES += "\\\n'
        for name, data in self.packages.items():
            _desc, _deps, _files, packageconfig, _keepfiles = data
            if packageconfig:
                provideLine += "    ${@bb.utils.contains('PACKAGECONFIG', '%s', '%s', '', d)} \\\n" % (packageconfig, name)
            else:
                provideLine += "    %s \\\n" % name
        provideLine += '"'

        provideNativeLine = 'RPROVIDES:${PN}:class-native += "\\\n'
        for name, data in self.packages.items():
            _desc, _deps, _files, packageconfig, _keepfiles = data
            if packageconfig:
                provideNativeLine += "    ${@bb.utils.contains('PACKAGECONFIG', '%s', '%s', '', d)} \\\n" % (packageconfig, name)
            else:
                provideNativeLine += "    %s-native \\\n" % name
        provideNativeLine += '"'

        self.out("ERTS_VERSION = \"" + self.erts_version + "\"")
        self.out("ERL_INTERFACE_VERSION = \"" + self.erl_interface_version + "\"")
        self.out(provideLine)
        self.out(provideNativeLine)
        self.out("")

        #
        # generate package line
        #

        packageLine = 'PACKAGES = "\\\n'
        for name, data in self.packages.items():
            _desc, _deps, _files, packageconfig, _keepfiles = data
            if name != '${PN}-dbg':
                if packageconfig:
                    packageLine += "    ${@bb.utils.contains('PACKAGECONFIG', '%s', '%s', '', d)} \\\n" % (packageconfig, name)
                else:
                    packageLine += "    %s \\\n" % name
        packageLine += '    ${PN}-dbg \\\n'
        packageLine += '    ${PN}-modules ${PN}-modules-dev"'

        self.out(packageLine)
        self.out("")

        #
        # generate package variables
        #

        for name, data in self.packages.items():
            desc, deps, files, packageconfig_enable, keepfiles = data

            #
            # write out the description, revision and dependencies
            #
            self.out('ALLOW_EMPTY:%s = "1"' % (name))
            self.out('DESCRIPTION:%s = "%s"' % (name, desc))
            self.out('RDEPENDS:%s = "%s"' % (name, deps))

            if keepfiles:
                line = 'FILES:%s += "' % name
            else:
                line = 'FILES:%s = "' % name

            #
            # check which directories to make in the temporary directory
            #

            # if python had a set-datatype this would be
            # sufficient. for now, we're using a dict
            # instead.
            dirset = {}
            for target in files:
                dirset[os.path.dirname(target)] = True

            #
            # generate which files to copy for the target (-dfR
            # because whole directories are also allowed)
            #
            for target in files:
                line += "%s " % target

            line += '"'
            self.out(line)
            self.out("")

        self.out('DESCRIPTION:${PN}-modules = "All Erlang modules"')
        line = 'RDEPENDS:${PN}-modules = "\\\n'

        pkgtoskip = ('-dbg', '-doc', '-staticdev', '-dev', '-examples')

        for name, data in sorted(self.packages.items()):
            if name.endswith(pkgtoskip):
                continue
            _desc, _deps, _files, packageconfig, _keepfiles = data
            if name not in ['${PN}-dev']:
                if packageconfig:
                    line += "    ${@bb.utils.contains('PACKAGECONFIG', '%s', '%s', '', d)} \\\n" % (packageconfig, name)
                else:
                    line += "    %s \\\n" % name

        self.out("%s \"" % line)
        self.out('ALLOW_EMPTY:${PN}-modules = "1"')
        self.out("")

        self.out('DESCRIPTION:${PN}-modules-dev = "All Erlang modules for developers"')
        line = 'RDEPENDS:${PN}-modules-dev = "${PN}-modules \\\n'

        for name, data in sorted(self.packages.items()):
            if not name.endswith(pkgtoskip) or name.endswith('-dbg'):
                continue
            _desc, _deps, _files, packageconfig, _keepfiles = data
            if name not in ['${PN}-dev']:
                if packageconfig:
                    line += "    ${@bb.utils.contains('PACKAGECONFIG', '%s', '%s', '', d)} \\\n" % (packageconfig, name)
                else:
                    line += "    %s \\\n" % name

        self.out("%s \"" % line)
        self.out('ALLOW_EMPTY:${PN}-modules-dev = "1"')


    def doEpilog(self):
        self.out("""""")
        self.out("")

    def make(self):
        self.doProlog()
        self.doBody()
        self.doEpilog()


def parse_arguments():
    parser = argparse.ArgumentParser(description='OpemEmbedded Erlang manifest generator')
    parser.add_argument('--erlang-version', required=True,
                        help='Erlang version, ex: 18.1')
    parser.add_argument('--outfile', help='Output file')

    return parser.parse_args()


if __name__ == "__main__":

    opts = parse_arguments()

    if opts.outfile:
        try:
            os.unlink(opts.outfile)
        except OSError:
            sys.exc_clear()
        outfile = file(opts.outfile, "w")
    else:
        outfile = sys.stdout

    if opts.erlang_version not in SPEC:
        sys.stderr.write("Unknown Erlang version '%s'\n" % opts.erlang_version)
        raise SystemExit(1)

    spec = SPEC[opts.erlang_version]

    m = MakefileMaker(outfile,
                      version=opts.erlang_version,
                      erts_version=spec['ERTS_VERSION'],
                      erl_interface_version=spec['ERL_INTERFACE_VERSION'])

    for module in spec['modules']:
        m.addModule(module)

    # Add packages here. Only specify dlopen-style library
    # dependencies here, no ldd-style dependencies!  Parameters:
    #
    # revision, name, description, dependencies, filenames
    #
    m.addPackage("${PN}-doc", "", "",
                 " ${libdir}/erlang/erts-*/doc ${libdir}/erlang/erts-*/man ${libdir}/erlang/COPYRIGHT ${libdir}/erlang/PR.template ${libdir}/erlang/README.md",
                 False,
                 False)
    m.addPackage("${PN}-dev", "",
                 "${PN}-erts-dev ${PN}-kernel-dev ${PN}-stdlib-dev ${PN}-sasl-dev" ,
                 "${libdir}/pkgconfig",
                 False,
                 False)
    m.addPackage("${PN}-dbg", "", "",
                 " ${libdir}/erlang/bin/.debug ${libdir}/erlang/erts-*/bin/.debug",
                 False,
                 False)
    m.addPackage("${PN}-staticdev", "", "",
                 "  ${libdir}/erlang/usr/lib/*.a ${libdir}/erlang/usr/lib/internal/*.a "
                 "${libdir}/erlang/erts-*/lib/*.a ${libdir}/erlang/erts-*/lib/internal/*",
                 False,
                 False)
    m.addPackage("${PN}", "",
                 "${PN}-erts ${PN}-kernel ${PN}-stdlib ${PN}-sasl ${PN}-epmd", "",
                 False,
                 False)
    m.make()
